<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="pCTRL_CODAC" Id="{e3062060-2f6b-47db-887a-7bfc3535650a}" SpecialFunc="None">
    <Declaration><![CDATA[// Procédure qui met à jour toutes les variables que le CODAC vient récupérer
// Pour l'instant, le CODAC récupère seulement les valeurs de l'instant t mais il faudra peut-être penser à faire un buffer pour stocker les valeurs non récupérées
PROGRAM pCTRL_CODAC
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Actualise les deux variables à récupérer
METH_arrValues_actualisation();
METH_arrErrors_actualisation();
METH_arrData_actualisation();]]></ST>
    </Implementation>
    <Method Name="METH_arrData_actualisation" Id="{839d3b10-4f1f-4a3f-b50e-d10b45bfa1a8}">
      <Declaration><![CDATA[METHOD METH_arrData_actualisation : BOOL
VAR_INPUT
END_VAR

VAR
	i: INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := 0 TO 15 DO
	GVL.arrData[GVL.ms][i] := GVL.arrValues[i];
END_FOR

IF GVL.ms < 199 THEN
	GVL.ms := GVL.ms + 1;
ELSE
	GVL.ms := 0;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="METH_arrErrors_actualisation" Id="{e8290d5b-8ff4-47fc-9f7a-69b3ad98681d}">
      <Declaration><![CDATA[// Méthode qui actualise le tableau arrErrors
METHOD METH_arrErrors_actualisation : BOOL
VAR_INPUT
END_VAR
VAR
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Enregistre dans chaque case du tableau la donnée d'un capteur de température
// à savoir si la valeur mesurée est supérieure (true) ou inférieure (false) au seuil TBD
FOR i := 0 TO 5 DO
	GVL.arrErrorTemperature[i] := GVL.arrTemperatures[i] > GVL.dTemperature_Seuil_TBD;
END_FOR

// Enregistre dans chaque case du tableau la donnée d'un capteur de tension
FOR i := 0 TO 2 DO
	GVL.arrErrorTension[i] := GVL.arrTensions[i] > GVL.dTension_Max;
END_FOR

// Enregistre dans chaque case du tableau la donnée du couple mesurée par le moteur
GVL.arrErrorCouple[0] := GVL.M1_X.NcToPlc.ActTorque > GVL.dCouple_Max;
GVL.arrErrorCouple[1] := GVL.M1_Y.NcToPlc.ActTorque > GVL.dCouple_Max;
GVL.arrErrorCouple[2] := GVL.M2_X.NcToPlc.ActTorque > GVL.dCouple_Max;
GVL.arrErrorCouple[3] := GVL.M2_Y.NcToPlc.ActTorque > GVL.dCouple_Max;
GVL.arrErrorCouple[4] := GVL.M3_X.NcToPlc.ActTorque > GVL.dCouple_Max;
GVL.arrErrorCouple[5] := GVL.M3_Y.NcToPlc.ActTorque > GVL.dCouple_Max;


// Enregistre dans chaque case du tableau la donnée de la position par rapport aux butées
IF GVL.bInit_OK THEN
	GVL.arrErrorPosition[0] := GVL.M1_X.NcToPlc.ActPos < GVL.Butee_Min_M1X OR GVL.M1_X.NcToPlc.ActPos > GVL.Butee_Max_M1X;
	GVL.arrErrorPosition[1] := GVL.M1_Y.NcToPlc.ActPos < GVL.Butee_Min_M1Y OR GVL.M1_Y.NcToPlc.ActPos > GVL.Butee_Max_M1Y;
	GVL.arrErrorPosition[2] := GVL.M2_X.NcToPlc.ActPos < GVL.Butee_Min_M2X OR GVL.M2_X.NcToPlc.ActPos > GVL.Butee_Max_M2X;
	GVL.arrErrorPosition[3] := GVL.M2_Y.NcToPlc.ActPos < GVL.Butee_Min_M2Y OR GVL.M2_Y.NcToPlc.ActPos > GVL.Butee_Max_M2Y;
	GVL.arrErrorPosition[4] := GVL.M2_X.NcToPlc.ActPos < GVL.Butee_Min_M2X OR GVL.M2_X.NcToPlc.ActPos > GVL.Butee_Max_M2X;
	GVL.arrErrorPosition[5] := GVL.M2_Y.NcToPlc.ActPos < GVL.Butee_Min_M2Y OR GVL.M2_Y.NcToPlc.ActPos > GVL.Butee_Max_M2Y;
ELSE
	GVL.arrErrorPosition[0] := FALSE;
	GVL.arrErrorPosition[1] := FALSE;
	GVL.arrErrorPosition[2] := FALSE;
	GVL.arrErrorPosition[3] := FALSE;
	GVL.arrErrorPosition[4] := FALSE;
	GVL.arrErrorPosition[5] := FALSE;
END_IF

// Enregistre dans chaque case du tableau la donnée d'un groupe de contrôle - position, couple, tension ou température
GVL.arrErrorSystem[0] := GVL.arrErrorPosition[0] OR GVL.arrErrorPosition[1] OR GVL.arrErrorPosition[2] OR GVL.arrErrorPosition[3] OR GVL.arrErrorPosition[4] OR GVL.arrErrorPosition[5] ;
GVL.arrErrorSystem[1] := GVL.arrErrorCouple[0] OR GVL.arrErrorCouple[1] OR GVL.arrErrorCouple[2] OR GVL.arrErrorCouple[3] OR GVL.arrErrorCouple[4] OR GVL.arrErrorCouple[5]; 
GVL.arrErrorSystem[2] := GVL.arrErrorTension[0] OR GVL.arrErrorTension[1] OR GVL.arrErrorTension[2];
GVL.arrErrorSystem[3] := GVL.arrErrorTemperature[0] OR GVL.arrErrorTemperature[1] OR GVL.arrErrorTemperature[2] OR GVL.arrErrorTemperature[3] 
OR GVL.arrErrorTemperature[4] OR GVL.arrErrorTemperature[5];
GVL.arrErrorSystem[4] := GVL.M1_X.Status.Error OR GVL.M1_Y.Status.Error OR GVL.M2_X.Status.Error OR GVL.M2_Y.Status.Error
OR GVL.M3_X.Status.Error OR GVL.M3_Y.Status.Error;
 
// Enregistre sur une seule variable s'il y a une erreur ou pas
GVL.bError := GVL.arrErrorSystem[0] OR GVL.arrErrorSystem[1] OR GVL.arrErrorSystem[2] OR GVL.arrErrorSystem[3] OR GVL.arrErrorSystem[4];

// Compile l'ensemble des variables en un seul tableau pour transiter les données plus facilement
FOR i := 0 TO 5 DO
	GVL.arrErrors[i] := GVL.arrErrorTemperature[i];
END_FOR

FOR i := 0 TO 2 DO
	GVL.arrErrors[6+i] := GVL.arrErrorTension[i];
END_FOR

FOR i := 0 TO 5 DO
	GVL.arrErrors[9+i] := GVL.arrErrorPosition[i];
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="METH_arrValues_actualisation" Id="{a4d54d1f-7b85-4021-b417-e319d7f8a790}">
      <Declaration><![CDATA[// Méthode qui actualise le tableau arrValues
METHOD METH_arrValues_actualisation : BOOL
VAR_INPUT
END_VAR
VAR
	i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GVL.arrTemperatures[0] := MAP(GVL.iTC1_M1, 0, 65535, 0, 65535*0.1);
GVL.arrTemperatures[1] := MAP(GVL.iTC2_M1, 0, 65535, 0, 65535*0.1);
GVL.arrTemperatures[2] := MAP(GVL.iTC1_M2, 0, 65535, 0, 65535*0.1);
GVL.arrTemperatures[3] := MAP(GVL.iTC2_M2, 0, 65535, 0, 65535*0.1);
GVL.arrTemperatures[4] := MAP(GVL.iTC1_M3, 0, 65535, 0, 65535*0.1);
GVL.arrTemperatures[5] := MAP(GVL.iTC2_M3, 0, 65535, 0, 65535*0.1);

GVL.arrTensions[0] := MAP(GVL.iTension_M1, -32767, 32767, -10, 10);
GVL.arrTensions[1] := MAP(GVL.iTension_M2, -32767, 32767, -10, 10);
GVL.arrTensions[2] := MAP(GVL.iTension_M3, -32767, 32767, -10, 10); 

// associe à chaque case du tableau une valeur d'intérêt pour le CODAC
FOR i := 0 TO 5 DO
	GVL.arrValues[i] := GVL.arrTemperatures[i];
END_FOR

FOR i := 0 TO 2 DO
	GVL.arrValues[6+i] := GVL.arrTensions[i];
END_FOR

GVL.arrValues[9]  := GVL.M1_X.NcToPlc.ActPos;
GVL.arrValues[10] := GVL.M1_Y.NcToPlc.ActPos;
GVL.arrValues[11] := GVL.M2_X.NcToPlc.ActPos;
GVL.arrValues[12] := GVL.M2_Y.NcToPlc.ActPos;
GVL.arrValues[13] := GVL.M3_X.NcToPlc.ActPos;
GVL.arrValues[14] := GVL.M3_Y.NcToPlc.ActPos;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="pCTRL_CODAC">
      <LineId Id="122" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="pCTRL_CODAC.METH_arrData_actualisation">
      <LineId Id="6" Count="7" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="pCTRL_CODAC.METH_arrErrors_actualisation">
      <LineId Id="6" Count="15" />
      <LineId Id="71" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="89" Count="0" />
      <LineId Id="25" Count="3" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="98" Count="6" />
      <LineId Id="29" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="30" Count="6" />
      <LineId Id="81" Count="0" />
      <LineId Id="37" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="40" Count="7" />
      <LineId Id="52" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="pCTRL_CODAC.METH_arrValues_actualisation">
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="4" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="37" Count="6" />
      <LineId Id="13" Count="4" />
      <LineId Id="19" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>